<html>
<head>
<title>Robotics codes from scratch (RCFS)</title>
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'>
<script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/89/three.min.js'></script>
<script defer src='https://pyscript.net/latest/pyscript.js'></script>
</head>

<py-env>
  - numpy
</py-env>

<body>

Links lengths:
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='200' id='slider0' class='w-72'></div>
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='200' id='slider1' class='w-72'></div>
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='100' id='slider2' class='w-72'></div>

<py-script>
from pyodide import create_proxy, to_js
from js import THREE, window, Object, performance
import js, pyodide
import numpy as np

#########################################################################################

# Logarithmic map for R^2 x S^1 manifold
def logmap(f, f0):
	position_error = f[:2,:] - f0[:2,:]
	orientation_error = np.imag(np.log(np.exp(f0[-1,:]*1j).conj().T * np.exp(f[-1,:]*1j).T)).conj()
	diff = np.vstack([position_error, orientation_error])
	return diff

# Forward kinematics for end-effector (in robot coordinate system)
def fkin(x, param):
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		param.l @ np.cos(L @ x),
		param.l @ np.sin(L @ x),
		np.mod(np.sum(x,0)+np.pi, 2*np.pi) - np.pi
	]) # f1,f2,f3, where f3 is the orientation (single Euler angle for planar robot)
	return f

# Forward kinematics for all joints (in robot coordinate system)
def fkin0(x, param): 
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		L @ np.diag(param.l) @ np.cos(L @ x),
		L @ np.diag(param.l) @ np.sin(L @ x)
	])
	f = np.hstack([np.zeros([2,1]), f])
	return f

# Jacobian with analytical computation (for single time step)
def Jkin(x, param):
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	J = np.vstack([
		-np.sin(L @ x).T @ np.diag(param.l) @ L,
		 np.cos(L @ x).T @ np.diag(param.l) @ L,
		 np.ones([1,param.nbVarX])
	])
	return J

# Residual and Jacobian for a viapoints reaching task (in object coordinate system)
def f_reach(x, param):
	f = logmap(fkin(x, param), param.Mu)
	J = np.zeros([param.nbPoints * param.nbVarF, param.nbPoints * param.nbVarX])
	for t in range(param.nbPoints):
		f[:2,t] = param.A[:,:,t].T @ f[:2,t] # Object oriented residual
		Jtmp = Jkin(x[:,t], param)
		Jtmp[:2] = param.A[:,:,t].T @ Jtmp[:2] # Object centered Jacobian
		
		if param.useBoundingBox:
			for i in range(2):
				if abs(f[i,t]) < param.sz[i]:
					f[i,t] = 0
					Jtmp[i] = 0
				else:
					f[i,t] -= np.sign(f[i,t]) * param.sz[i]
		
		J[t*param.nbVarF:(t+1)*param.nbVarF, t*param.nbVarX:(t+1)*param.nbVarX] = Jtmp
	return f, J

def iLQR(x0, u, param):
	global Su, Sx0
	for i in range(param.nbIter):
		x = Su0 @ u + Sx0 @ x0 # System evolution
		x = x.reshape([param.nbVarX, param.nbData], order='F')
		f, J = f_reach(x[:,tl], param) # Residuals and Jacobians
		du = np.linalg.inv(Su.T @ J.T @ Q @ J @ Su + R) @ (-Su.T @ J.T @ Q @ f.flatten('F') - u * param.r) # Gauss-Newton update
		# Estimate step size with backtracking line search method
		alpha = 1
		cost0 = f.flatten('F').T @ Q @ f.flatten('F') + np.linalg.norm(u)**2 * param.r # Cost
		while True:
			utmp = u + du * alpha
			xtmp = Su0 @ utmp + Sx0 @ x0 # System evolution
			xtmp = xtmp.reshape([param.nbVarX, param.nbData], order='F')
			ftmp, _ = f_reach(xtmp[:,tl], param) # Residuals 
			cost = ftmp.flatten('F').T @ Q @ ftmp.flatten('F') + np.linalg.norm(utmp)**2 * param.r # Cost
			if cost < cost0 or alpha < 1e-3:
				u = utmp
				#console.log("Iteration {}, cost: {}".format(i,cost))
				break
			alpha /= 2
		if np.linalg.norm(du * alpha) < 1E-2:
			break # Stop iLQR iterations when solution is reached
	return x
	
## Parameters
# ===============================

param = lambda: None # Lazy way to define an empty class in python
param.dt = 1e-2 # Time step length
param.nbData = 50 # Number of datapoints
param.nbIter = 100 # Maximum number of iterations for iLQR
param.nbPoints = 2 # Number of viapoints
param.nbVarX = 3 # State space dimension (x1,x2,x3)
param.nbVarU = 3 # Control space dimension (dx1,dx2,dx3)
param.nbVarF = 3 # Objective function dimension (f1,f2,f3, with f3 as orientation)
param.l = [200, 200, 100] # Robot links lengths
param.sz = [.2, .3] # Size of objects
param.r = 1e-6 # Control weight term
param.Mu = np.asarray([[200, 100, -np.pi/6], [300, 200, -np.pi/3]]).T # Viapoints 
param.A = np.zeros([2, 2, param.nbPoints]) # Object orientation matrices
param.useBoundingBox = False # Consider bounding boxes for reaching cost

# Object rotation matrices
for t in range(param.nbPoints):
	orn_t = param.Mu[-1,t]
	param.A[:,:,t] = np.asarray([
		[np.cos(orn_t), -np.sin(orn_t)],
		[np.sin(orn_t), np.cos(orn_t)]
	])

# Precision matrix
Q = np.identity(param.nbVarF * param.nbPoints)

# Control weight matrix
R = np.identity((param.nbData-1) * param.nbVarU) * param.r

# Time occurrence of viapoints
tl = np.linspace(0, param.nbData, param.nbPoints+1)
tl = np.rint(tl[1:]).astype(np.int64) - 1
idx = np.array([i + np.arange(0,param.nbVarX,1) for i in (tl*param.nbVarX)]) 

# Transfer matrices (for linear system as single integrator)
Su0 = np.vstack([
	np.zeros([param.nbVarX, param.nbVarX*(param.nbData-1)]), 
	np.tril(np.kron(np.ones([param.nbData-1, param.nbData-1]), np.eye(param.nbVarX) * param.dt))
]) 
Sx0 = np.kron(np.ones(param.nbData), np.identity(param.nbVarX)).T
Su = Su0[idx.flatten()] # We remove the lines that are out of interest

#########################################################################################

# GUI
sliders = [document.getElementById('slider0'), document.getElementById('slider1'), document.getElementById('slider2')];

# Mouse events
mouse = THREE.Vector2.new()

mousedown = 0
needsUpdate = 0

def onMouseMove(event):
	#event.preventDefault()
	mouse.x = (event.offsetX / window.innerWidth) * 2 - 1
	mouse.y = -(event.offsetY / window.innerHeight) * 2 + 1

#def onTouchMove(event):
#	#event.preventDefault()
#	mouse.x = (event.changedTouches[0].clientX / window.innerWidth) * 2 - 1
#	mouse.y = -(event.changedTouches[0].clientY / window.innerHeight) * 2 + 1
	
def onMouseDown(event):
	global mousedown
	mousedown = 1
#	console.log('Mouse down')

def onMouseUp(event):
	global mousedown, needsUpdate
	mousedown = 0
	needsUpdate = 1
	console.log('Mouse up')

#def onMouseClick(event):
#	event.preventDefault()
#	console.log(event.mousedown)

js.document.addEventListener('mousemove', pyodide.create_proxy(onMouseMove))
js.document.addEventListener('touchmove', pyodide.create_proxy(onMouseMove)) #for mobile interfaces

js.document.addEventListener('mousedown', pyodide.create_proxy(onMouseDown))
js.document.addEventListener('pointerdown', pyodide.create_proxy(onMouseDown)) #for mobile interfaces

js.document.addEventListener('mouseup', pyodide.create_proxy(onMouseUp))
js.document.addEventListener('pointerup', pyodide.create_proxy(onMouseUp))  #for mobile interfaces

#js.document.addEventListener('click', pyodide.create_proxy(onMouseClick))


# Webgl scene

#camera = THREE.PerspectiveCamera.new(75, window.innerWidth / window.innerHeight, 0.1, 300);
camera = THREE.OrthographicCamera.new(-window.innerWidth/2, window.innerWidth/2, window.innerHeight/2, -window.innerHeight/2, -500, 500)
camera.position.set(0, 0, 300)
camera.lookAt(0, 0, 0);

scene = THREE.Scene.new()
scene.background = THREE.Color.new("#FFFFFF")

perms = {"antialias":1, "depth":1}
perms = Object.fromEntries(to_js(perms))
renderer = THREE.WebGLRenderer.new(perms)
#renderer = THREE.WebGLRenderer.new({"antialias":True})
#renderer.depth = 1
#renderer.antialias = 1
renderer.setSize(window.innerWidth, window.innerHeight)
document.body.appendChild(renderer.domElement)


#f = fkin0(x, param) #This does not work: be careful!!!!
f = np.zeros([2,4])
fh = np.zeros([2,])
#fh=np.array([200.0, 0])

# Objects 
perms = {"color":"#FF3399", "size":20}
perms = Object.fromEntries(to_js(perms))
obj_material = THREE.PointsMaterial.new(perms)
#obj_material.color.setRGB(1.0, 0.3, 0.7)
obj_geom = THREE.Geometry.new()
obj_geom.vertices.push(THREE.Vector3.new(fh[0], fh[1], 0))
obj_geom.vertices.push(THREE.Vector3.new(fh[0], fh[1], 0))
obj = THREE.Points.new(obj_geom, obj_material)
scene.add(obj)


# Robot
rob_geom = THREE.Geometry.new()
for i in range(param.nbVarX+1):
	rob_geom.vertices.push(THREE.Vector3.new(f[0,i], f[1,i], 2))
perms = {"color":"#777777", "linewidth":10}
perms = Object.fromEntries(to_js(perms))
rob_material = THREE.LineBasicMaterial.new(perms)
rob = THREE.Line.new(rob_geom, rob_material)
scene.add(rob)


# Articulations
perms = {"color":"#555555"}
perms = Object.fromEntries(to_js(perms))
circ_material = THREE.MeshBasicMaterial.new(perms)
circ_geom = THREE.CircleGeometry.new(10, 14)
jnt = THREE.Object3D.new()
for i in range(param.nbVarX+1):
	jntTmp = THREE.Mesh.new(circ_geom, circ_material)
	jnt.add(jntTmp)
scene.add(jnt)


raycaster = THREE.Raycaster.new();
raycaster.params.Points.threshold = 100.0;


#########################################################################################

x0 = np.array([3*np.pi/4, -np.pi/2, -np.pi/4]) # Initial state
u = np.zeros(param.nbVarU * (param.nbData-1)) # Initial control commands
x = iLQR(x0, u, param)

t = 0
while True:
#	time = performance.now() * 0.0005;
	t += 1
	if t > param.nbData-1:
		t = 0

	# Robot parameters
	for i in range(param.nbVarX):
		param.l[i] = (float)(sliders[i].value)
	
	# FK
	f = fkin0(x[:,t], param)

	# Update webgl rendering
	for i in range(param.nbPoints):
		obj_geom.vertices[i].set(param.Mu[0,i], param.Mu[1,i], 0)

	for i in range(param.nbVarX+1):
		rob_geom.vertices[i].set(f[0,i], f[1,i], 2)
		jnt.children[i].position.set(f[0,i], f[1,i], 3)

	rob.updateMatrixWorld()
	rob.updateMatrix()
	rob.geometry.applyMatrix(rob.matrix)
	rob.matrix.identity()
	
	obj.updateMatrixWorld()
	obj.updateMatrix()
	obj.geometry.applyMatrix(obj.matrix)
	obj.matrix.identity()
	
	raycaster.setFromCamera(mouse, camera);
#	intersections = raycaster.intersectObjects(scene.children)
#	intersections = raycaster.intersectObject(bg) 
	intersections = raycaster.intersectObject(obj) 
	if mousedown==1 and intersections.length > 0:
		param.Mu[0,intersections[0].index] = intersections[0].point.x
		param.Mu[1,intersections[0].index] = intersections[0].point.y
#		console.log(intersections[0].index)
#		intersections[0].object.material.color.set(0xff0000);

	if needsUpdate==1:
		console.log("iLQR required")
		x = iLQR(x0, u, param)
		needsUpdate = 0
	
	renderer.render(scene, camera)
	await asyncio.sleep(0.03)

</py-script>
</body>
</html>
