<html>
<head>
<title>Robotics codes from scratch (RCFS)</title>
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'>
<script defer src='https://pyscript.net/latest/pyscript.js'></script>
</head>

<py-env>
  - numpy
</py-env>

<body>

Link length:
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='100' id='slider_length' class='w-72'></div>
Object orientation:
<div class='w-full m-auto'><input type='range' min='-3.14159' max='3.14159' step='.1' value='0.7854' id='slider_angle' class='w-72'></div>

<canvas id='robot-canvas' width='1000' height='800' class='m-auto border-2'></canvas>

<py-script>
from pyodide import create_proxy
from js import document, console, window, Path2D
import numpy as np

#########################################################################################

# Logarithmic map for R^2 x S^1 manifold
def logmap(f, f0):
	diff = np.zeros(3)
	diff[:2] = f[:2] - f0[:2]
	diff[2] = np.imag(np.log(np.exp(f0[-1]*1j).conj().T * np.exp(f[-1]*1j).T)).conj()
	return diff
	
# Forward kinematics for end-effector (in robot coordinate system)
def fkin(x, param):
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		param.l @ np.cos(L @ x),
		param.l @ np.sin(L @ x),
		np.mod(np.sum(x,0)+np.pi, 2*np.pi) - np.pi
	]) # f1,f2,f3, where f3 is the orientation (single Euler angle for planar robot)
	return f

# Forward kinematics for all joints (in robot coordinate system)
def fkin0(x, param): 
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		L @ np.diag(param.l) @ np.cos(L @ x),
		L @ np.diag(param.l) @ np.sin(L @ x)
	])
	f = np.hstack([np.zeros([2,1]), f])
	return f

# Jacobian with analytical computation (for single time step)
def Jkin(x, param):
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	J = np.vstack([
		-np.sin(L @ x).T @ np.diag(param.l) @ L,
		 np.cos(L @ x).T @ np.diag(param.l) @ L,
		 np.ones([1,param.nbVarX])
	])
	return J

param = lambda: None # Lazy way to define an empty class in python
param.nbVarX = 4 # State space dimension (x1,x2,x3)
param.l = np.ones(param.nbVarX) * 100 #np.array([param.nbVarX,]) * 100 # Robot links lengths


#########################################################################################

# GUI
slider_length = document.getElementById('slider_length')
slider_angle = document.getElementById('slider_angle')

# Mouse events
mouse = np.zeros(2)
#mouse = np.array([0, 0])
mousedown = 0

def onMouseMove(event):
	global mouse
	#event.preventDefault()
	mouse[0] = event.offsetX - canvas.width * 0.5 #(event.offsetX / (window.innerWidth*.5)) * 2 - 1
	mouse[1] = event.offsetY - canvas.height * 0.5 #-(event.offsetY / (window.innerHeight*.5)) * 2 + 1

#def onTouchMove(event):
#	global mouse
#	mouse[0] = (event.changedTouches[0].offsetX / window.innerWidth) * 2 - 1
#	mouse[1] = -(event.changedTouches[0].offsetY / window.innerHeight) * 2 + 1
#	console.log(event.changedTouches[0].offsetX)
#	console.log(event.offsetX)
	
def onMouseDown(event):
	global mousedown
	mousedown = 1
#	console.log('Mouse down')

def onMouseUp(event):
	global mousedown
	mousedown = 0
#	console.log('Mouse up')

document.addEventListener('mousemove', create_proxy(onMouseMove))
document.addEventListener('touchmove', create_proxy(onMouseMove)) #for mobile interfaces
#document.addEventListener('touchmove', create_proxy(onTouchMove)) #for mobile interfaces

document.addEventListener('mousedown', create_proxy(onMouseDown))
document.addEventListener('pointerdown', create_proxy(onMouseDown)) #for mobile interfaces

document.addEventListener('mouseup', create_proxy(onMouseUp))
document.addEventListener('pointerup', create_proxy(onMouseUp))  #for mobile interfaces

#########################################################################################

canvas = document.getElementById('robot-canvas')
ctx = canvas.getContext('2d')

def clear_screen():
	ctx.fillStyle = 'white'
	ctx.fillRect(0, 0, canvas.width, canvas.height)
	
def draw_robot():
	ctx.translate(canvas.width*0.5, canvas.height*0.5)
	# Draw kinematic chain
	ctx.beginPath()
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	ctx.lineWidth = '12'
	ctx.strokeStyle = '#888888'
	ctx.moveTo(0, 0)
	for i in range(param.nbVarX+1):
		ctx.lineTo(f[0,i], f[1,i])
	ctx.stroke()
	ctx.setTransform(1, 0, 0, 1, 0, 0) # Reset transformation to identity 

def draw_obj():
	ctx.translate(canvas.width*0.5, canvas.height*0.5)
	ctx.translate(fh[0], fh[1])
	ctx.rotate(fh[2])
	# Draw object
	ctx.fillStyle = '#FF3399'
	ctx.fillRect(-40, -20, 80, 40)
	ctx.textAlign = 'center'
	ctx.font = '20px Georgia'
	ctx.fillStyle = '#000000'
	ctx.fillText('fh', 0, 0)
	ctx.setTransform(1, 0, 0, 1, 0, 0) # Reset transformation to identity 

#########################################################################################

#x = np.array([3*np.pi/4, -np.pi/2, -np.pi/4]) # Initial state
x = np.ones(param.nbVarX) * np.pi / param.nbVarX
fh = np.array([100, 100, -np.pi/4])

while True:
#	time = performance.now() * 0.0005;

	# Robot parameters
	for i in range(param.nbVarX):
		param.l[i] = (float)(slider_length.value)
		
	# Object angle
	fh[2] = (float)(slider_angle.value)

	# IK
	J = Jkin(x, param)
	f = fkin0(x, param)
	#dx = np.linalg.pinv(J) @ (fh - f[:,-1])
	f_ee = fkin(x, param)
#	dx = np.linalg.pinv(J) @ (fh - f_ee.flatten()) 
	dx = np.linalg.pinv(J) @ logmap(fh, f_ee.flatten())
	x += dx * 5E-1
	
	# Rendering
	clear_screen()
	draw_obj()
	draw_robot()
	
	# Object selection
	if mousedown==1 and np.linalg.norm(fh[:2]-mouse)<50:
		fh[:2] = mouse

	await asyncio.sleep(0.001)

</py-script>
</body>
</html>
