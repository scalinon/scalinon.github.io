<html>
<head>
<title>Robotics codes from scratch (RCFS)</title>
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'>
<script src='https://cdnjs.cloudflare.com/ajax/libs/three.js/89/three.min.js'></script>
<script defer src='https://pyscript.net/latest/pyscript.js'></script>
</head>

<py-env>
  - numpy
</py-env>

<body>

Links lengths:
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='150' id='slider0' class='w-72'></div>
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='150' id='slider1' class='w-72'></div>
<div class='w-full m-auto'><input type='range' min='0' max='300' step='1' value='150' id='slider2' class='w-72'></div>

<center>
<div id="robot-canvas" width="600" height="400"></div>
</center>

<py-script>
from pyodide import create_proxy, to_js
from js import THREE, window, Object, performance
import js, pyodide
import numpy as np

#########################################################################################
	
# Forward kinematics for all joints (in robot coordinate system)
def fkin0(x, param): 
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		L @ np.diag(param.l) @ np.cos(L @ x),
		L @ np.diag(param.l) @ np.sin(L @ x)
	])
	f = np.hstack([np.zeros([2,1]), f])
	return f

# General param parameters
# ===============================
param = lambda: None # Lazy way to define an empty class in python
param.dt = 2E-2 # Time step length
param.nbVarX = 3 # State space dimension (x1,x2,x3)
param.nbVarU = 3 # Control space dimension (dx1,dx2,dx3)
param.nbVarF = 3 # Objective function dimension (f1,f2,f3, with f3 as orientation)
param.l = [1, 1, 1] # Robot links lengths
param.l_m = [1, 1, 1] # Link masses
param.damping = 3 # Damping
param.gravity = 9.81 # Gravity

# Auxiliary matrices
param.aux_l = np.reshape(param.l, [1,param.nbVarX])
param.aux_m = np.reshape(param.l_m, [1,param.nbVarX])
param.aux_L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
param.aux_Lm = np.multiply(np.triu(np.ones([param.aux_m.shape[1], param.aux_m.shape[1]])), np.repeat(param.aux_m, param.aux_m.shape[1],0)) 

#########################################################################################

# GUI
sliders = [document.getElementById('slider0'), document.getElementById('slider1'), document.getElementById('slider2')]
slider_angle = document.getElementById('slider_angle')

# Mouse events
mouse = THREE.Vector2.new()
mousedown = 0

def onMouseMove(event):
	#event.preventDefault()
	mouse.x = (event.offsetX / (window.innerWidth*.5)) * 2 - 1
	mouse.y = -(event.offsetY / (window.innerHeight*.5)) * 2 + 1

def onTouchMove(event):
	mouse.x = (event.changedTouches[0].offsetX / window.innerWidth) * 2 - 1
	mouse.y = -(event.changedTouches[0].offsetY / window.innerHeight) * 2 + 1
	console.log(event.changedTouches[0].offsetX)
	console.log(event.offsetX)
	
def onMouseDown(event):
	global mousedown
	mousedown = 1
#	console.log('Mouse down')

def onMouseUp(event):
	global mousedown
	mousedown = 0
#	console.log('Mouse up')

js.document.addEventListener('mousemove', pyodide.create_proxy(onMouseMove))
#js.document.addEventListener('touchmove', pyodide.create_proxy(onMouseMove)) #for mobile interfaces
js.document.addEventListener('touchmove', pyodide.create_proxy(onTouchMove)) #for mobile interfaces

js.document.addEventListener('mousedown', pyodide.create_proxy(onMouseDown))
js.document.addEventListener('pointerdown', pyodide.create_proxy(onMouseDown)) #for mobile interfaces

js.document.addEventListener('mouseup', pyodide.create_proxy(onMouseUp))
js.document.addEventListener('pointerup', pyodide.create_proxy(onMouseUp))  #for mobile interfaces

#js.document.addEventListener('click', pyodide.create_proxy(onMouseClick))


# Webgl scene
#camera = THREE.PerspectiveCamera.new(75, window.innerWidth / window.innerHeight, 0.1, 300);
camera = THREE.OrthographicCamera.new(-window.innerWidth/2, window.innerWidth/2, window.innerHeight/2, -window.innerHeight/2, -500, 500)
camera.position.set(0, 0, 300)
camera.lookAt(0, 0, 0);

scene = THREE.Scene.new()
scene.background = THREE.Color.new("#EEEEEE")

perms = {"antialias":1, "depth":1}
perms = Object.fromEntries(to_js(perms))
renderer = THREE.WebGLRenderer.new(perms)
#renderer = THREE.WebGLRenderer.new({"antialias":True})
#renderer.depth = 1
#renderer.antialias = 1

#renderer.setSize(window.innerWidth, window.innerHeight)
renderer.setSize(window.innerWidth*.5, window.innerHeight*.5)

#document.body.appendChild(renderer.domElement)
document.getElementById('robot-canvas').appendChild(renderer.domElement)
#container = document.getElementById('robot-canvas')
#document.body.appendChild(container)
#container.appendChild(renderer.domElement)


#f = fkin0(x, param) #This does not work: be careful!!!!
f = np.zeros([2, param.nbVarX+1])
fh = np.zeros([3,])
#fh=np.array([200.0, 0])

# Robot
perms = {"color":"#777777", "linewidth":10}
perms = Object.fromEntries(to_js(perms))
rob_material = THREE.LineBasicMaterial.new(perms)
rob_geom = THREE.Geometry.new()
for i in range(param.nbVarX+1):
	rob_geom.vertices.push(THREE.Vector3.new(f[0,i], f[1,i], 2))
rob = THREE.Line.new(rob_geom, rob_material)
scene.add(rob)
#rob.matrixAutoUpdate = 1
#rob.updateMatrix()


# Articulations
perms = {"color":"#555555"}
perms = Object.fromEntries(to_js(perms))
circ_material = THREE.MeshBasicMaterial.new(perms)
circ_geom = THREE.CircleGeometry.new(10, 14)
jnt = THREE.Object3D.new()
for i in range(param.nbVarX+1):
	jntTmp = THREE.Mesh.new(circ_geom, circ_material)
	jnt.add(jntTmp)
scene.add(jnt)

#Object selection
raycaster = THREE.Raycaster.new();
raycaster.params.Points.threshold = 50.0; #Selection precision for points


#########################################################################################

def FD_step(x, u, param):
	l = param.aux_l
	m = param.aux_m
	L = param.aux_L
	Lm = param.aux_Lm
	# Computation in matrix form of G,M, and C
	G = -np.reshape(np.sum(Lm, 1), [param.nbVarX, 1]) * l.T * np.cos(L @ np.reshape(x[0:param.nbVarX], [param.nbVarX, 1])) * param.gravity
	G = L.T @ G
	M = (l.T * l) * np.cos(np.reshape(L @ x[:param.nbVarX], [param.nbVarX, 1]) - L @ x[:param.nbVarX]) * (Lm**.5 @ ((Lm**.5).T))
	M = L.T @ M @ L 
	C = -(l.T * l) * np.sin(np.reshape(L @ x[:param.nbVarX], [param.nbVarX, 1]) - L @ x[:param.nbVarX]) * (Lm**.5 @ ((Lm**.5).T))

	# Compute acceleration
	inv_M = np.linalg.inv(M)
	ddq = inv_M @ (u + G + L.T @ C @ (L @ np.reshape(x[param.nbVarX:],[param.nbVarX, 1]))**2) - \
          L @ np.reshape(x[param.nbVarX:],[param.nbVarX, 1])*param.damping
	xt = x.reshape(2 * param.nbVarX, 1) + np.vstack([x[param.nbVarX:].reshape(param.nbVarX, 1), ddq]) * param.dt
	return xt
	
# Initialization
# ===============================
x = np.zeros([2*param.nbVarX, 1]) #initial states
u = np.zeros([param.nbVarU, 1]) #Input commands for the whole task.  

## Forward Dynamics
#for t in range(param.nbData-1):
#	xt = FD_step(x, param)
#	x = np.hstack([x, xt])

#########################################################################################
#t = 0

while True:
#	time = performance.now() * 0.0005;
#	t +=1
#	if t > param.nbData-2:
#		t = 0
	
	x = FD_step(x, u, param)
	f = fkin0(x[0:param.nbVarX].flatten(), param)	

	# Robot parameters
	for i in range(3):
		param.l[i] = (float)(sliders[i].value)
	
	for i in range(param.nbVarX+1):
		rob_geom.vertices[i].set(f[0,i], f[1,i], 2)
		jnt.children[i].position.set(f[0,i], f[1,i], 3)

	rob.updateMatrixWorld()
	rob.updateMatrix()
	rob.geometry.applyMatrix(rob.matrix)
	rob.matrix.identity()
	
#	raycaster.setFromCamera(mouse, camera)
##	intersections = raycaster.intersectObjects(scene.children)
##	intersections = raycaster.intersectObject(bg) 
#	intersections = raycaster.intersectObject(obj) 
#	if mousedown==1 and intersections.length > 0:
#		fh[0] = intersections[0].point.x
#		fh[1] = intersections[0].point.y
##		console.log(intersections[0].uv)
##		console.log(intersections[0].uv2)
##		intersections[0].object.material.color.set(0xff0000);
	
	renderer.render(scene, camera)
	await asyncio.sleep(0.0001)

</py-script>
</body>
</html>
