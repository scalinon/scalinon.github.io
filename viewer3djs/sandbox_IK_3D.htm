<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway&display=swap'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->



<script defer src='https://pyscript.net/latest/pyscript.min.js'></script>

<py-config type='toml'>
    packages = ['numpy']
    [[fetch]]
        from = './viewer3d/'
        files = ['viewer3d.py']
</py-config>

<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->

<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'>
<span class='navbar-toggler-icon' style='cursor: pointer;'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->

  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
    <div class='offcanvas-header'><!--style='height: 50px;'-->
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></a>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>

    <div class='offcanvas-body'>
    <ul class='list-unstyled ps-0'>


      <li class='border-top my-1'></li>

      <li class='mb-1'>
        <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#general-collapse' aria-expanded='true'>General information</button>
        <div class='collapse show' id='general-collapse'>
          <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
          <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
            <li><a href='about.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>About</div></a></li>
          </ul>
        </div>
      </li>

      <li class='border-top my-1'></li>

      <li class='mb-1'>
        <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#sandboxes-collapse' aria-expanded='true'>Sandboxes</button>
        <div class='collapse show' id='sandboxes-collapse'>
          <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
            <li><a href='sandbox_FK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Forward kinematics (FK)</div></a></li>
            <li><a href='sandbox_IK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Inverse kinematics (IK)</div></a></li>
            <li><a href='sandbox_bimanual.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Bimanual robot</div></a></li>
            <li><a href='sandbox_humanoid.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Humanoid robot (CoM and coordination matrix)</div></a></li>
            <li><a href='sandbox_iLQR.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
            <li><a href='sandbox_iLQR_car.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>iLQR for car</div></a></li>
            <li><a href='sandbox_iLQR_bicopter.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>iLQR for bicopter</div></a></li>
          </ul>
        </div>
      </li>

      <li class='border-top my-1'></li>

      <li class='mb-1'>
        <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>Exercises</button>
        <div class='collapse show' id='exercises-collapse'>
          <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
            <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>01</div>
            <div class='p-1 mb-0'>Linear algebra in Python</div></a></li>
            <li><a href='exercise02.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>02</div>
            <div class='p-1 mb-0'>Movement primitives and Newton's method</div></a></li>
            <li><a href='exercise03.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>03</div>
            <div class='p-1 mb-0'>Gaussian Distributions</div></a></li>
            <li><a href='exercise04a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>4a</div>
            <div class='p-1 mb-0'>Forward kinematics</div></a></li>
            <li><a href='exercise04b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>4b</div>
            <div class='p-1 mb-0'>Inverse kinematics and nullspace control</div></a></li>
            <li><a href='exercise05a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>5a</div>
            <div class='p-1 mb-0'>Forward dynamics</div></a></li>
            <li><a href='exercise05b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>5b</div>
            <div class='p-1 mb-0'>Inverse dynamics and impedance control</div></a></li>
            <li><a href='exercise06a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>6a</div>
            <div class='p-1 mb-0'>Planning with linear quadratic regulator</div></a></li>
            <li><a href='exercise06b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>6b</div>
            <div class='p-1 mb-0'>Planning in joint space with LQR</div></a></li>
            <li><a href='exercise07.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>07</div>
            <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
            <li><a href='exercise08.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>08</div>
            <div class='p-1 mb-0'>Exploration with ergodic control</div></a></li>
            <li><a href='exercise09.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>09</div>
            <div class='p-1 mb-0'>Orientation with Riemannian manifold</div></a></li>
          </ul>
        </div>
      </li>

    </ul>
    </div> <!--offcanvas-body-->

  </div> <!--offcanvas-->
</div> <!--container-fluid-->
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<div class='row'>
<div class='col-sm-1'></div>
<div class='col-sm-7'>

<br><br>

<script>
function clearMsgs() {
  const el = document.getElementById('repl-err');
  el.innerText = '';
  //console.log('event!');
}
</script>


<ul class='nav nav-tabs' id='myTab' role='tablist'>

<li class='nav-item' role='presentation'><button class='nav-link active' id='posorient-tab' data-bs-toggle='tab' data-bs-target='#posorient-tab-pane' type='button' role='tab' aria-controls='posorient-tab-pane' aria-selected='true'>Position + orientation</button></li>

<li class='nav-item' role='presentation'><button class='nav-link' id='pos-tab' data-bs-toggle='tab' data-bs-target='#pos-tab-pane' type='button' role='tab' aria-controls='pos-tab-pane' aria-selected='false'>Position</button></li>

<li class='nav-item' role='presentation'><button class='nav-link' id='orient-tab' data-bs-toggle='tab' data-bs-target='#orient-tab-pane' type='button' role='tab' aria-controls='orient-tab-pane' aria-selected='false'>Orientation</button></li>

</ul>


<div class='tab-content' id='myTabContent'>

<div class='tab-pane fade show active' id='posorient-tab-pane' role='tabpanel' aria-labelledby='posorient-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = [0.5, -0.3, 0.0, -1.8, 0.0, 1.5, 1.0]  # Initial robot state

def controlCommand(x, mu):
    J = Jkin(x)
    f = fkin(x)
    u = np.linalg.pinv(J) @ logmap(mu, f)  # Position & orientation tracking
    return u
</py-repl>
</div>
</div>

<div class='tab-pane fade show' id='pos-tab-pane' role='tabpanel' aria-labelledby='pos-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = [0.5, -0.3, 0.0, -1.8, 0.0, 1.5, 1.0]  # Initial robot state

def controlCommand(x, mu):
    J = Jkin(x)
    f = fkin(x)
    u = np.linalg.pinv(J[0:3,:]) @ (mu[0:3] - f[0:3])  # Position tracking
    return u
</py-repl>
</div>
</div>

<div class='tab-pane fade show' id='orient-tab-pane' role='tabpanel' aria-labelledby='orient-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = [0.5, -0.3, 0.0, -1.8, 0.0, 1.5, 1.0]  # Initial robot state

def controlCommand(x, mu):
    J = Jkin(x)
    f = fkin(x)
    u = np.linalg.pinv(J[3:,:]) @ logmap_S3(mu[3:], f[3:])  # Orientation tracking
    return u
</py-repl>
</div>
</div>

</div>

<p id='repl-out' style='font-size: 70%; color: #777777;'>(click on the green run button to run the code; the blue target can be moved with the mouse)</p>
<p id='repl-err' style='font-size: 70%; color: #880000;'></p>

</div> <!--sm-7-->

<div class='col-sm-4'>
<div class='sticky-sm-top'>
    <div id="viewer3d" style="width: 100%;; height: 400px"></div>
</div>
</div> <!--sm-4-->

</div> <!--row-->


<!-- Import all the necessary JavaScript dependency modules
Sadly, can't be imported from an external file for the moment, this is not supported by Chrome
-->
<script async src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>
<script type="importmap">
    {
        "imports": {
            "three": "https://cdn.jsdelivr.net/npm/three@0.141.0/build/three.module.js",
            "three/examples/jsm/": "https://cdn.jsdelivr.net/npm/three@0.141.0/examples/jsm/",
            "xacro-parser": "https://cdn.jsdelivr.net/npm/xacro-parser@0.3.1/src/index.js",
            "urdf-loader": "https://cdn.jsdelivr.net/npm/urdf-loader@0.10.4/src/URDFLoader.js",
            "expr-eval": "https://cdn.jsdelivr.net/npm/expr-eval@2.0.2/dist/index.mjs"
        }
    }
</script>


<!-- We need to import our 'Viewer3D' JavaScript module, otherwise it is not
accessible from Python -->
<script type="module">
    import { Viewer3D } from './viewer3d/viewer3d.js';
</script>


<py-script>
        from viewer3d import Viewer3D
        from js import document, Themes
        import math
        import numpy as np


        # The function that will be called once the 3D viewer has finished loading
        robot = None
        def onSceneReady():
            global robot
            robot = viewer3D.robot


        # Create the Viewer3D object
        viewer3D = Viewer3D(
            document.getElementById('viewer3d'),
            parameters=dict(
                logmap_sphere=True,
                theme=Themes.Simple,
            ),
            onready=onSceneReady,
        )

        # Disable the manipulation of the joints
        viewer3D.jointsManipulationEnabled = False

        # Add one target
        viewer3D.addTarget("target", [0.0, 0.4, 0.5], [0.57, 0.57, 0.42, -0.42], '#FF3399')
        viewer3D.logmapTarget = "target"

        # The function that will be called once per frame
        x = None

        def ikUpdate(delta):
            global x

            if x is None:
                x = robot.jointPositions
            elif not isinstance(x, np.ndarray):
                x = np.array(x)

            target = viewer3D.getTarget("target")

            u = controlCommand(x, target.transforms)

            x += u * 0.1
            robot.jointPositions = x

        viewer3D.setRenderingCallback(ikUpdate)


        # Placeholder for the function to implement
        def controlCommand(x, mu):
            return np.zeros(x.shape)


        # Forward kinematics function (allows to not care about 'robot')
        def fkin(x):
            return robot.fkin(x)


        # Jacobian with numerical computation
        def Jkin(x):
            eps = 1e-6
            D = len(x)

            # Matrix computation
            X = np.tile(x.reshape((-1,1)), [1,D])
            F1 = fkin(X)
            F2 = fkin(X + np.identity(D) * eps)
            J = logmap(F2, F1) / eps

            return J


        # Matrix form of quaternion
        def QuatMatrix(q):
            # Note: quaternions elements are ordered as [x, y, z, w]
            return np.array([
                [q[3], -q[2], q[1], q[0]],
                [q[2], q[3], -q[0], q[1]],
                [-q[1], q[0], q[3], q[2]],
                [-q[0], -q[1], -q[2], q[3]],
            ])


        # Arcosine redefinition to make sure the distance between antipodal quaternions is zero
        def acoslog(x):
            try:
                y = math.acos(x)
            except ValueError:
                return math.nan

            if x < 0:
                y = y - np.pi
            return y


        # Logarithmic map for S^3 manifold (with e in tangent space)
        def logmap_S3(x, x0):
            R = QuatMatrix(x0)
            x = R.T @ x
            sc = acoslog(x[3]) / np.sqrt(1.0 - x[3]**2)
            if math.isnan(sc):
                sc = 1.0
            return x[:3] * sc


        # Logarithmic map for R^3 x S^3 manifold (with e in tangent space)
        def logmap(f, f0):
            if len(f.shape) == 1:
                e = np.ndarray((6,))
                e[0:3] = (f[0:3] - f0[0:3])
                e[3:] = logmap_S3(f[3:], f0[3:])
            else:
                e = np.ndarray((6, f.shape[1]))
                e[0:3,:] = (f[0:3,:] - f0[0:3,:])
                for t in range(f.shape[1]):
                    e[3:,t] = logmap_S3(f[3:,t], f0[3:,t])
            return e
</py-script>

</div> <!--container-->
</body>
</html>
