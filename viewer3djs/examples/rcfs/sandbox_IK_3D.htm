<!--
SPDX-FileCopyrightText: 2023 Idiap Research Institute <contact@idiap.ch>

SPDX-FileContributor: Philip Abbet <philip.abbet@idiap.ch>

SPDX-License-Identifier: MIT
-->

<!doctype html>
<html lang='en'>
<head>
    <title>Robotics codes from scratch</title>
    <meta charset="utf-8">
    <meta name='viewport' content='width=device-width, initial-scale=1'>

    <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

    <script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>

    <link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'>

    <py-config type='toml'>
        packages = ['numpy']
        [[fetch]]
            from = '../../dist/'
            files = ['viewer3d.py']
    </py-config>
</head>

<body>

    <!-- Menu -->
    <nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
        <div class='container-fluid'>
            <button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'>
                <span class='navbar-toggler-icon' style='cursor: pointer;'></span>
            </button>

            <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
                <div class='offcanvas-header'>
                    <h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'>
                        <i class='bi bi-robot'></i>
                        <i class='bi bi-code-slash'></i>
                        RCFS
                    </h4>
                    <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
                </div>

                <div class='offcanvas-body'>
                    <ul class='list-unstyled ps-0'>
                        <li class='border-top my-1'></li>

                        <li class='mb-1'>
                            <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#general-collapse' aria-expanded='true'>General information</button>
                            <div class='collapse show' id='general-collapse'>
                                <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
                                    <li>
                                        <div class='p-1 mb-0'>Placeholder menu, for test purposes only</div>
                                    </li>
                                </ul>
                            </div>
                        </li>
                    </ul>
                </div> <!--offcanvas-body-->
            </div> <!--offcanvas-->
        </div> <!--container-fluid-->
    </nav>


    <!-- The content of the page -->
    <div class='container-fluid'>
        <style>
            .py-repl-box {
                background-color: #ffffffaa;
            }

            .nav-tabs .nav-link {
                background-color: #eeeeee;
            }

            .left-nav-button {
                position: absolute;
                top: 50px;
                left: 0;
                z-index: 100;
                background: #ffffff;
                padding: 10px 5px;
                border: solid 1px #cccccc;
                border-top-right-radius: 6px;
                border-bottom-right-radius: 6px;
                cursor: pointer;
                user-select: none;
            }

            .left-nav-button.open {
                border-top-right-radius: 0px;
                border-bottom-right-radius: 0px;
                border-top-left-radius: 6px;
                border-bottom-left-radius: 6px;
            }

            .left-nav-button span {
                writing-mode: vertical-rl;
                text-orientation: mixed;
            }

            .left-nav-button span:before {
                padding-bottom: 10px;
            }
        </style>


        <script>
            function toggleCode(btn) {
                const el = document.getElementById('code');
                const span = btn.getElementsByTagName('span')[0];

                if (el.style.display == 'none') {
                    el.style.display = 'block';
                    btn.classList.add("open");

                    span.classList.remove("bi-chevron-double-right");
                    span.classList.add("bi-chevron-double-left");
                } else {
                    el.style.display = 'none';
                    btn.classList.remove("open");

                    span.classList.remove("bi-chevron-double-left");
                    span.classList.add("bi-chevron-double-right");
                }
            }
        </script>


        <div class='row'>
            <div class='col-sm-1'></div>
            <div class='col-sm-11' style="position: relative">

                <div id="viewer3d" style="width: 100%;; height: 700px"></div>

                <div class="left-nav-button open" onclick="toggleCode(this)">
                    <span class="bi-chevron-double-left">Code</span>
                </div>

                <div id="code" class="collapse" style="display: block; position: absolute; top: 50px; left: 35px; max-width: calc(100% - 75px); z-index: 100">
                    <ul class='nav nav-tabs' id='myTab' role='tablist'>

                        <li class='nav-item' role='presentation'>
                            <button class='nav-link active' id='posorient-tab' data-bs-toggle='tab' data-bs-target='#posorient-tab-pane' type='button' role='tab' aria-controls='posorient-tab-pane' aria-selected='true'>Position + orientation</button>
                        </li>

                        <li class='nav-item' role='presentation'>
                            <button class='nav-link' id='pos-tab' data-bs-toggle='tab' data-bs-target='#pos-tab-pane' type='button' role='tab' aria-controls='pos-tab-pane' aria-selected='false'>Position</button>
                        </li>

                        <li class='nav-item' role='presentation'>
                            <button class='nav-link' id='orient-tab' data-bs-toggle='tab' data-bs-target='#orient-tab-pane' type='button' role='tab' aria-controls='orient-tab-pane' aria-selected='false'>Orientation</button>
                        </li>

                    </ul>

                    <div class='tab-content' id='myTabContent'>
                        <div class='tab-pane fade show active' id='posorient-tab-pane' role='tabpanel' aria-labelledby='posorient-tab' tabindex='0'>
                            <py-repl>
                                x = [0.5, -0.3, 0.0, -1.8, 0.0, 1.5, 1.0]  # Initial robot state

                                def controlCommand(x, mu):
                                    J = Jkin(x)
                                    f = fkin(x)
                                    u = np.linalg.pinv(J) @ logmap(mu, f)  # Position & orientation tracking
                                    return u
                            </py-repl>
                        </div>

                        <div class='tab-pane fade' id='pos-tab-pane' role='tabpanel' aria-labelledby='pos-tab' tabindex='0'>
                            <py-repl>
                                x = [0.5, -0.3, 0.0, -1.8, 0.0, 1.5, 1.0]  # Initial robot state

                                def controlCommand(x, mu):
                                    J = Jkin(x)
                                    f = fkin(x)
                                    u = np.linalg.pinv(J[0:3,:]) @ (mu[0:3] - f[0:3])  # Position tracking
                                    return u
                            </py-repl>
                        </div>

                        <div class='tab-pane fade' id='orient-tab-pane' role='tabpanel' aria-labelledby='orient-tab' tabindex='0'>
                            <py-repl>
                                x = [0.5, -0.3, 0.0, -1.8, 0.0, 1.5, 1.0]  # Initial robot state

                                def controlCommand(x, mu):
                                    J = Jkin(x)
                                    f = fkin(x)
                                    u = np.linalg.pinv(J[3:,:]) @ logmap_S3(mu[3:], f[3:])  # Orientation tracking
                                    return u
                            </py-repl>
                        </div>

                    </div>

                    <p style='font-size: 70%; color: #777777; user-select: none;'>(click on the green run button to run the code; the pink target can be moved with the mouse)</p>
                </div>

            </div> <!--sm-11-->
        </div> <!--row-->
    </div> <!--container-->


    <!-- Import all the necessary JavaScript dependency modules
    Sadly, can't be imported from an external file for the moment, this is not supported by Chrome
    -->
    <script src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>
    <script type="importmap">
        {
            "imports": {
                "three": "https://cdn.jsdelivr.net/npm/three@0.141.0/build/three.module.js",
                "three/examples/jsm/": "https://cdn.jsdelivr.net/npm/three@0.141.0/examples/jsm/",
                "mujoco": "../../dist/jsm/mujoco_wasm.js",
                "katex": "https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.mjs"
            }
        }
    </script>


    <!-- We need to import our 'Viewer3D' JavaScript module, otherwise it is not
    accessible from Python -->
    <script type="module">
        import { downloadScene, downloadPandaRobot, initPyScript } from '../../dist/viewer3d.js';

        // Download the assets
        await downloadPandaRobot();
        await downloadScene('../scenes/panda.xml');

        // Now PyScript can be initialised
        initPyScript();
    </script>


    <py-script>
        from viewer3d import Viewer3D, configs, logmap_S3, logmap
        from js import document
        import numpy as np

        # The function that will be called once per frame
        x = None

        def ikUpdate(delta, time):
            global x

            if x is None:
                x = robot.jointPositions
            elif not isinstance(x, np.ndarray):
                x = np.array(x)

            u = controlCommand(x, target.transforms)

            x += u * 0.1
            robot.jointPositions = x


        # Create the Viewer3D
        viewer3D = Viewer3D(document.getElementById('viewer3d'))
        viewer3D.setRenderingCallback(ikUpdate)

        # Load the scene and retrieve the robot
        viewer3D.loadScene('/scenes/panda.xml')
        viewer3D.translateCamera([0, 0.4, 0])

        robot = viewer3D.createRobot('panda', configs.Panda.new())

        # Disable the manipulation of the joints
        viewer3D.jointsManipulationEnabled = False

        # Add one target
        target = viewer3D.addTarget('target', [0.1, 0.6, 0.6], [0.65, 0.21, 0.64, 0.33], '#F08967')

        # Enable the logmap
        viewer3D.enableLogmap(robot, target, position='right')


        # Placeholder for the function to implement
        def controlCommand(x, mu):
            return np.zeros(x.shape)

        # Forward kinematics function (allows to not care about 'robot' in the user code)
        def fkin(x):
            return robot.fkin(x)

        # Jacobian function (allows to not care about 'robot' in the user code)
        def Jkin(x):
            return robot.Jkin(x)
    </py-script>
</body>
</html>
