<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway&display=swap'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<!-- <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css' integrity='sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X' crossorigin='anonymous'>
<script defer src='https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js' integrity='sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz' crossorigin='anonymous'></script>
<script defer src='https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js' integrity='sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05' crossorigin='anonymous'></script>
<script>
let macros = {
    '\\tp': '\\text{\\tiny{#1}}',
    '\\trsp' : '\\top',
    '\\psin' : '\\dagger',
    '\\eqref': '\\href{###1}{(\\text{#1})}',
    '\\ref': '\\href{###1}{\\text{#1}}',
    '\\label': '\\htmlId{#1}{}'
};
document.addEventListener('DOMContentLoaded', function() {
    renderMathInElement(document.body, {
        // customised options
        trust: (context) => ['\\htmlId', '\\href'].includes(context.command),
        macros: macros,
        // • auto-render specific keys, e.g.:
        delimiters: [
            {left: '$$', right: '$$', display: true},
            {left: '$', right: '$', display: false},
            {left: '\\(', right: '\\)', display: false},
            {left: '\\begin{equation}', right: '\\end{equation}', display: true},
            {left: '\\begin{equation*}', right: '\\end{equation*}', display: true},
            {left: '\\begin{align}', right: '\\end{align}', display: true},
            {left: '\\begin{align*}', right: '\\end{align*}', display: true},
            {left: '\\begin{alignat}', right: '\\end{alignat}', display: true},
            {left: '\\begin{gather}', right: '\\end{gather}', display: true},
            {left: '\\begin{CD}', right: '\\end{CD}', display: true},
            {left: '\\[', right: '\\]', display: true}
        ],
        // • rendering keys, e.g.:
        throwOnError : false
    });
});
</script> -->


<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->


<py-config type='toml'>
    packages = ['numpy']
    [[fetch]]
        from = './viewer3d/'
        files = ['viewer3d.py']
</py-config>

<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->

<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'>
<span class='navbar-toggler-icon' style='cursor: pointer;'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->

  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
    <div class='offcanvas-header'><!--style='height: 50px;'-->
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></a>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>

    <div class='offcanvas-body'>
    <ul class='list-unstyled ps-0'>


      <li class='border-top my-1'></li>

      <li class='mb-1'>
        <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#general-collapse' aria-expanded='true'>General information</button>
        <div class='collapse show' id='general-collapse'>
          <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
          <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
            <li><a href='about.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>About</div></a></li>
          </ul>
        </div>
      </li>

      <li class='border-top my-1'></li>

      <li class='mb-1'>
        <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#sandboxes-collapse' aria-expanded='true'>Sandboxes</button>
        <div class='collapse show' id='sandboxes-collapse'>
          <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
            <li><a href='sandbox_FK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Forward kinematics (FK)</div></a></li>
            <li><a href='sandbox_IK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Inverse kinematics (IK)</div></a></li>
            <li><a href='sandbox_bimanual.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Bimanual robot</div></a></li>
            <li><a href='sandbox_humanoid.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Humanoid robot (CoM and coordination matrix)</div></a></li>
            <li><a href='sandbox_iLQR.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
            <li><a href='sandbox_iLQR_car.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>iLQR for car</div></a></li>
            <li><a href='sandbox_iLQR_bicopter.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0'>iLQR for bicopter</div></a></li>
          </ul>
        </div>
      </li>

      <li class='border-top my-1'></li>

      <li class='mb-1'>
        <button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>Exercises</button>
        <div class='collapse show' id='exercises-collapse'>
          <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
            <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>01</div>
            <div class='p-1 mb-0'>Linear algebra in Python</div></a></li>
            <li><a href='exercise02.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>02</div>
            <div class='p-1 mb-0'>Movement primitives and Newton's method</div></a></li>
            <li><a href='exercise03.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>03</div>
            <div class='p-1 mb-0'>Gaussian Distributions</div></a></li>
            <li><a href='exercise04a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>4a</div>
            <div class='p-1 mb-0'>Forward kinematics</div></a></li>
            <li><a href='exercise04b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>4b</div>
            <div class='p-1 mb-0'>Inverse kinematics and nullspace control</div></a></li>
            <li><a href='exercise05a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>5a</div>
            <div class='p-1 mb-0'>Forward dynamics</div></a></li>
            <li><a href='exercise05b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>5b</div>
            <div class='p-1 mb-0'>Inverse dynamics and impedance control</div></a></li>
            <li><a href='exercise06a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>6a</div>
            <div class='p-1 mb-0'>Planning with linear quadratic regulator</div></a></li>
            <li><a href='exercise06b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>6b</div>
            <div class='p-1 mb-0'>Planning in joint space with LQR</div></a></li>
            <li><a href='exercise07.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>07</div>
            <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
            <li><a href='exercise08.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>08</div>
            <div class='p-1 mb-0'>Exploration with ergodic control</div></a></li>
            <li><a href='exercise09.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
            <div class='p-1 mb-0 bg-dark text-white font-monospace'>09</div>
            <div class='p-1 mb-0'>Orientation with Riemannian manifold</div></a></li>
          </ul>
        </div>
      </li>

    </ul>
    </div> <!--offcanvas-body-->

  </div> <!--offcanvas-->
</div> <!--container-fluid-->
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<div class='row'>
    <div class='col-sm-1'></div>
    <div class='col-sm-11' style="position: relative;">
        <div id="viewer3d" style="width: 100%; height: 700px"></div>
        <div id='formula' style="position: absolute; top: 0; padding-top: 20px; font-size: 150%;">
    </div> <!--sm-11-->
</div> <!--row-->


<!-- Import all the necessary JavaScript dependency modules
Sadly, can't be imported from an external file for the moment, this is not supported by Chrome
-->
<script src="https://unpkg.com/es-module-shims@1.6.3/dist/es-module-shims.js"></script>
<script type="importmap">
    {
        "imports": {
            "three": "https://cdn.jsdelivr.net/npm/three@0.141.0/build/three.module.js",
            "three/examples/jsm/": "https://cdn.jsdelivr.net/npm/three@0.141.0/examples/jsm/",
            "xacro-parser": "https://cdn.jsdelivr.net/npm/xacro-parser@0.3.1/src/index.js",
            "urdf-loader": "https://cdn.jsdelivr.net/npm/urdf-loader@0.10.4/src/URDFLoader.js",
            "expr-eval": "https://cdn.jsdelivr.net/npm/expr-eval@2.0.2/dist/index.mjs",
            "katex": "https://cdn.jsdelivr.net/npm/katex@0.16.4/dist/katex.mjs"
        }
    }
</script>


<!-- We need to import our 'Viewer3D' JavaScript module, otherwise it is not
accessible from Python -->
<script type="module">
    import { Viewer3D } from './viewer3d/viewer3d.js';
</script>


<py-script>
        from viewer3d import Viewer3D
        from js import document, katex, Themes
        import math
        import numpy as np

        joint_colors = ['#FF0000', '#FFC700', '#C71585', '#00FF00', '#0000FF', '#1E90FF', '#66CDAA']
        f_colors = ['#AA0000', '#00AA00', '#0000AA']

        x = None
        duration = 0.0
        currentJoint = 0
        startPosition = 0

        point_f1 = None
        point_f2 = None
        point_f3 = None
        point_ee = None

        # The function called when the 3D viewer is ready
        def onReady():
            global x
            global startPosition
            global point_f1, point_f2, point_f3, point_ee

            x = viewer3D.robot.jointPositions
            startPosition = x[currentJoint]

            generateLatex(currentJoint)
            generatePaths(currentJoint, x)

            ee_pos = viewer3D.robot.fkin(x)

            point_f1 = viewer3D.addPoint(
                'f1',
                [ee_pos[0], 0, 0],
                radius=0.02,
                color=f_colors[0],
                label='f_1',
                shading=True
            )

            point_f2 = viewer3D.addPoint(
                'f2',
                [0, ee_pos[1], 0],
                radius=0.02,
                color=f_colors[1],
                label='f_2',
                shading=True
            )

            point_f3 = viewer3D.addPoint(
                'f3',
                [0, 0, ee_pos[0]],
                radius=0.02,
                color=f_colors[2],
                label='f_3',
                shading=True
            )

            point_ee = viewer3D.addPoint(
                'ee',
                ee_pos[:3],
                radius=0.02,
                color='#000000',
                shading=True
            )

            viewer3D.addPath('xaxis', [[0, 0, 0], [1, 0, 0]], radius=0.002, color='#333333')
            viewer3D.addPath('yaxis', [[0, 0, 0], [0, 1, 0]], radius=0.002, color='#333333')
            viewer3D.addPath('zaxis', [[0, 0, 0], [0, 0, 1]], radius=0.002, color='#333333')


        # The function that will be called once per frame
        def update(delta):
            global x
            global duration
            global currentJoint
            global startPosition

            duration += delta
            if duration >= 2.0:
                duration = 0.0
                x[currentJoint] = startPosition
                currentJoint = (currentJoint + 1) % 7
                startPosition = x[currentJoint]
                generateLatex(currentJoint)
                generatePaths(currentJoint, x)

            x[currentJoint] = startPosition + np.sin(np.pi * duration) * .2

            viewer3D.robot.jointPositions = x

            ee_pos = viewer3D.robot.fkin(x)

            point_f1.position = [ee_pos[0], 0, 0]
            point_f2.position = [0, ee_pos[1], 0]
            point_f3.position = [0, 0, ee_pos[2]]
            point_ee.position = ee_pos[:3]


        # Create the Viewer3D object
        viewer3D = Viewer3D(
            document.getElementById('viewer3d'),
            parameters=dict(
                show_joint_positions=True,
                theme=Themes.Simple,
                joint_position_colors=joint_colors,
                joint_position_layer=1,
                robot_use_light_toon_shader=True,
                shadows=True,
            ),
            composition=[
                dict(
                    layer=0,
                    effect='outline',
                    effect_parameters=dict(
                        thickness=0.005,
                        color=[0.5, 0.5, 0.5, 0.0]
                    ),
                ),
                dict(
                    layer=2,
                    clear_depth=True,
                )
            ],
            onready=onReady
        )

        viewer3D.setRenderingCallback(update)

        # Disable the manipulation of the joints
        viewer3D.jointsManipulationEnabled = False


        # Function that update the Jacobian formula
        def generateLatex(joint):
            text = '\\bm{J}(\\bm{x})=\\begin{bmatrix}\n'

            for i in range(1, 4):
                for j in range(1, 8):
                    if j > 1:
                        text += ' & '

                    if j == joint + 1:
                        text += '\\frac{\\color{' + f_colors[i-1] + '}\\partial f_' + str(i) + '}{\\color{' + joint_colors[j-1] + '}\\partial x_' + str(j) + '}\n'
                    else:
                        text += '{\\color{#CCCCCC}\\frac{\\partial f_' + str(i) + '}{\\partial x_' + str(j) + '}}\n'

                if i < 3:
                    text += '\\\\[2mm]\n'

            text += '\\end{bmatrix}'

            katex.render(text, document.getElementById('formula'), {
                'throwOnError': False
            })


        # Function that update paths
        def generatePaths(joint, positions):
            N = 60

            positions = np.repeat(positions.reshape(-1, 1), N, axis=1)
            positions[joint,:] += [ np.sin(np.pi * (0.5 + i / N)) * .2 for i in range(N) ]

            ee_pos = viewer3D.robot.fkin(positions)

            viewer3D.removePath('ee')
            viewer3D.removePath('f1')
            viewer3D.removePath('f2')
            viewer3D.removePath('f3')

            f1 = np.zeros((N, 3))
            f1[:,0] = ee_pos[0,:]

            f2 = np.zeros((N, 3))
            f2[:,1] = ee_pos[1,:]

            f3 = np.zeros((N, 3))
            f3[:,2] = ee_pos[2,:]

            viewer3D.activateLayer(2)
            viewer3D.addPath('ee', ee_pos[:3,:].T, radius=0.007, color='#000000', shading=True)
            viewer3D.addPath('f1', f1, radius=0.007, color=f_colors[0], shading=True)
            viewer3D.addPath('f2', f2, radius=0.007, color=f_colors[1], shading=True)
            viewer3D.addPath('f3', f3, radius=0.007, color=f_colors[2], shading=True)

</py-script>

</div> <!--container-->

<script src='https://pyscript.net/latest/pyscript.min.js'></script>

</body>
</html>
